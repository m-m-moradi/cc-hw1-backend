"""
Django settings for cc_hw1_backend project.

Generated by 'django-admin startproject' using Django 3.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
import decouple

# activate.bat
# for /f "delims== tokens=1,2" %%G in (param.txt) do set %%G=%%H
# activate (bash)
# export $(grep -v '^#' .env.dev | xargs -d '\n')
# deactivate (bash)
# unset $(grep - v '^#'.env.dev | sed -E 's/(.*)=.*/\1/' | xargs)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# these three methods are identical (except the return type str vs Path)
# BASE_DIR = Path(__file__).resolve().parent.parent
# BASE_DIR = environ.Path(__file__) - 2

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

DOTENV_FILE = os.environ.get("ENV_FILE", None)
if DOTENV_FILE:
    print(f"using .env file: {DOTENV_FILE}")
    env_config = decouple.Config(decouple.RepositoryEnv(DOTENV_FILE))
else:
    print("without .env file")
    env_config = decouple.Config(decouple.RepositoryEmpty())

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env_config.get('SECRET_KEY', default='default')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env_config.get('DEBUG_VALUE', default=False, cast=bool)

ALLOWED_HOSTS = []
# Application definition
cors_whitelist = env_config.get("CORS_ORIGINS", default=None, cast=decouple.Csv())
if cors_whitelist:
    CORS_ORIGIN_WHITELIST = [origin.strip() for origin in env_config.get("CORS_ORIGINS", cast=decouple.Csv())]

CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^https?://localhost(:.*)?$",
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'cache-control',
]

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'bulletin',
    'generic_relations',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'cc_hw1_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'cc_hw1_backend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env_config.get('DB_NAME', default=None),
        'USER': env_config.get('DB_USER', default=None),
        'PASSWORD': env_config.get('DB_PASSWORD', default=None),
        'HOST': env_config.get('DB_IP', default=None),
        'PORT': env_config.get('DB_PORT', default=None),
        'CONN_MAX_AGE': env_config.get('CONN_MAX_AGE', 60) if not DEBUG else 0
    }
}

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 15
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Asia/Tehran'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

USE_S3 = env_config.get('USE_S3', default=True, cast=bool)
if USE_S3:
    # aws settings
    AWS_ACCESS_KEY_ID = env_config.get('AWS_ACCESS_KEY_ID', default='default_key', cast=str)
    AWS_SECRET_ACCESS_KEY = env_config.get('AWS_SECRET_ACCESS_KEY', default='default_secret', cast=str)
    AWS_STORAGE_BUCKET_NAME = env_config.get('AWS_STORAGE_BUCKET_NAME', default='default_bucket', cast=str)
    AWS_DEFAULT_ACL = None
    AWS_S3_ENDPOINT_URL = env_config.get('AWS_S3_ENDPOINT_URL', default='default_url', cast=str)
    AWS_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
    # s3 static settings
    STATIC_LOCATION = 'static'
    STATIC_URL = f'/static/'
    STATICFILES_STORAGE = 'cc_hw1_backend.storage_backends.StaticStorage'
    # s3 public media settings
    PUBLIC_MEDIA_LOCATION = 'media'
    MEDIA_URL = f'/media/'
    DEFAULT_FILE_STORAGE = 'cc_hw1_backend.storage_backends.PublicMediaStorage'
else:
    STATIC_URL = '/static/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
    TEMP_ROOT = os.path.join(MEDIA_ROOT, 'tmp')
    if not os.path.exists(TEMP_ROOT):
        os.makedirs(TEMP_ROOT)

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

IBM_T2S_API_KEY = env_config.get('IBM_T2S_API_KEY', default=None, cast=str)
IBM_T2S_API_URL = env_config.get('IBM_T2S_API_URL', default=None, cast=str)
IBM_NLP_API_KEY = env_config.get('IBM_NLP_API_KEY', default=None, cast=str)
IBM_NLP_API_URL = env_config.get('IBM_NLP_API_URL', default=None, cast=str)
